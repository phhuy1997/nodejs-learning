1. Create package.json:
   npm init
   Then fill the information
   --> package.json will be automatically created

2. Express Framework:
   npm install express@4.18.2
   --> node_modules/... will be automatically created and includes express & related of express
   --> package-lock.json will be automatically created: It declares all detail package that was installed
   (more details than package.json)

3. View Render: (popular: EJS)
   npm install --save-exact ejs@3.1.8
   Then create folder /src/views/... to contain all file view .ejs
   Call the .ejs file from server.js

4. Set up ENV: (to dynamic port for each different enviroment that code will be run on)
   # instal dotenv package so that we can read the variables in the .env file through the process.env.<VARIALBLE>
   npm install --save-exact dotenv@16.0.3
   Create .env file
	 In server.js, we can envoke the VARIABLE from .env file

5. Nodemon DevTool:
	 # install Nodemon so that when there is any updated code (.js, .mjs), the server can be automatically reset without manually "npm run start" again
	 npm install --save-dev nodemon@2.0.20    (--save-dev means that package will only be used in devDependencies --> no need to be use this package when deploy to production)
   In package.json, change script to "nodemon ./src/server.js"

6. Static File:
   Create folder /public. --> Inside it, create folder /css, /js, /images
	 # Those folders will contain file that will be run on client.(ex:js will be used in <Scriptt> of the DOM in /views)
   Now, In server.js, We can use this code: app.use(express.static(path.join(__dirname, 'public')))
	 # Example When Client access url: http://localhost:3000/images/flezzexample.png, Client can read image in /images folder
	 In /views/sample.ejs, we add <img src="/images/flezzexample.png" alt=""> 
	 # --> Client can see image rendered in HTML because it was fetched from http://localhost:3000/images/flezzexample.png




How to run:
C1: node server.js (default)
C2: npm run start (according to scripts)
